#version 450

layout(local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(set = 0, binding = 0, r8ui)     uniform readonly restrict uimage3D cell_types;
layout(set = 0, binding = 1, r32f)    uniform restrict image3D pressures;
layout(set = 0, binding = 2, rgba32f) uniform restrict image3D velocities;


const int CELL_WATER = 2;
const int CELL_SOLID = 3;

const float fluid_density = 1;
const float time_delta = 0.01;
const float cell_width = 1;

#define addPressureIfNotSolid(move, elem, neg)\
if (imageLoad(cell_types, i + move).x != CELL_SOLID){\
    dv[elem] += neg * imageLoad(pressures, i + move).x;\
}else{\
    dv[elem] += neg * local_pressure;\
}


void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID);
    if (imageLoad(cell_types, i).x == CELL_WATER){
        vec3 v = imageLoad(velocities, i).xyz;
        vec3 dv = vec3(0, 0, 0);
        float local_pressure = imageLoad(pressures, i).x;

        addPressureIfNotSolid(ivec3(1, 0, 0), 0, 1)
        addPressureIfNotSolid(ivec3(0, 1, 0), 1, 1)
        addPressureIfNotSolid(ivec3(0, 0, 1), 2, 1)

        addPressureIfNotSolid(ivec3(-1, 0, 0), 0, -1)
        addPressureIfNotSolid(ivec3(0, -1, 0), 1, -1)
        addPressureIfNotSolid(ivec3(0, 0, -1), 2, -1)


        imageStore(velocities, i, vec4(v - time_delta / fluid_density / cell_width * dv, 0.0));
    }
}