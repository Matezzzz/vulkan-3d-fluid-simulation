#version 450

layout(local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(set = 0, binding = 0, r8ui)     uniform readonly restrict uimage3D cell_types;
layout(set = 0, binding = 1, rgba32f) uniform restrict image3D velocities;

const int CELL_AIR = 1;
const int CELL_WATER = 2;

void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID.xyz);
    vec4 v = imageLoad(velocities, i);

    if (imageLoad(cell_types, i).x == CELL_AIR){
        int c = 0;
        vec4 v = vec4(0, 0, 0, 0);

        if (imageLoad(cell_types, i + ivec3(1, 0, 0)).x == CELL_WATER){ v += imageLoad(velocities, i + ivec3(1, 0, 0)); c++; }
        if (imageLoad(cell_types, i + ivec3(0, 1, 0)).x == CELL_WATER){ v += imageLoad(velocities, i + ivec3(0, 1, 0)); c++; }
        if (imageLoad(cell_types, i + ivec3(0, 0, 1)).x == CELL_WATER){ v += imageLoad(velocities, i + ivec3(0, 0, 1)); c++; }
        if (imageLoad(cell_types, i - ivec3(1, 0, 0)).x == CELL_WATER){ v += imageLoad(velocities, i - ivec3(1, 0, 0)); c++; }
        if (imageLoad(cell_types, i - ivec3(0, 1, 0)).x == CELL_WATER){ v += imageLoad(velocities, i - ivec3(0, 1, 0)); c++; }
        if (imageLoad(cell_types, i - ivec3(0, 0, 1)).x == CELL_WATER){ v += imageLoad(velocities, i - ivec3(0, 0, 1)); c++; }
        if (c != 0) imageStore(velocities, i, v / c);
    }
}