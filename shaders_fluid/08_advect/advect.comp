#version 450
#extension GL_EXT_samplerless_texture_functions : require

layout(local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform simulation_params_buffer{
    layout(offset = 20) int cell_type_air;
    layout(offset = 24) int cell_type_water;
    layout(offset = 32) float time_delta;
};
layout(set = 0, binding = 1, r8ui)    uniform readonly restrict uimage3D cell_types;
layout(set = 0, binding = 2)          uniform sampler3D velocities_src;
layout(set = 0, binding = 3, rgba32f) uniform writeonly restrict image3D velocities_dst;




uint cellAt(ivec3 i){
    return imageLoad(cell_types, i).x;
}
bool isActive(uint type){
    return (type == cell_type_air || type == cell_type_water);
}
bool isWater(uint type){
    return (type == cell_type_water);
}

float getVelocityXAt(vec3 pos){
    return texture(velocities_src, pos + vec3(0.5, 0, 0)).x;
}
float getVelocityYAt(vec3 pos){
    return texture(velocities_src, pos + vec3(0, 0.5, 0)).y;
}
float getVelocityZAt(vec3 pos){
    return texture(velocities_src, pos + vec3(0, 0, 0.5)).z;
}
vec3 getVelocityAt(vec3 pos){
    return vec3(getVelocityXAt(pos), getVelocityYAt(pos), getVelocityZAt(pos));
}


void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID.xyz);
    vec3 velocity = texelFetch(velocities_src, i, 0).xyz;
    uint local_type = cellAt(i);

    bool cur_active = isWater(local_type);
    if (i.x != 0 && (cur_active || isWater(cellAt(i - ivec3(1, 0, 0))))){
        vec3 pos_in_tex = vec3(i) + vec3(0, 0.5, 0.5);
        vec3 cur_v = getVelocityAt(pos_in_tex);
        velocity.x = getVelocityXAt(pos_in_tex - cur_v*time_delta);
    }
    if (i.y != 0 && (cur_active || isWater(cellAt(i - ivec3(0, 1, 0))))){
        vec3 pos_in_tex = vec3(i) + vec3(0.5, 0, 0.5);
        vec3 cur_v = getVelocityAt(pos_in_tex);
        velocity.y = getVelocityYAt(pos_in_tex - cur_v*time_delta);
    }
    if (i.z != 0 && (cur_active || isWater(cellAt(i - ivec3(0, 0, 1))))){
        vec3 pos_in_tex = vec3(i) + vec3(0.5, 0.5, 0);
        vec3 cur_v = getVelocityAt(pos_in_tex);
        velocity.z = getVelocityZAt(pos_in_tex - cur_v*time_delta);
    }
    imageStore(velocities_dst, i, vec4(velocity, 0.0));
}