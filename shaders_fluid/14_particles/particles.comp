#version 450

/**
 * particles.comp
 *  - Move particles through the fluid according to local velocities
 */


layout(local_size_x = 1000) in;


const int PARTICLE_BUFFER_SIZE = 1000000;


layout(set = 0, binding = 0) uniform simulation_params_buffer{
    layout(offset = 32) float time_delta;           //simulation time step
    layout(offset = 236) float active_particle_w;   //W component of active particles will be equal to this value
};
layout(set = 0, binding = 1) uniform sampler3D velocities;
layout(set = 0, binding = 2) buffer restrict particles{
    vec4 particle_positions[PARTICLE_BUFFER_SIZE];
};



//functions for sampling interpolated velocities - described in more detail in 08_advect/advect.comp
float getVelocityXAt(vec3 pos){
    return texture(velocities, pos + vec3(0.5, 0, 0)).x;
}
float getVelocityYAt(vec3 pos){
    return texture(velocities, pos + vec3(0, 0.5, 0)).y;
}
float getVelocityZAt(vec3 pos){
    return texture(velocities, pos + vec3(0, 0, 0.5)).z;
}
vec3 getVelocityAt(vec3 pos){
    return vec3(getVelocityXAt(pos), getVelocityYAt(pos), getVelocityZAt(pos));
}





void main(){
    int i = int(gl_GlobalInvocationID.x);
    //if particle is active
    if (particle_positions[i].w == active_particle_w){\
        //get velocity at particle position, move particle according to it
        particle_positions[i].xyz += getVelocityAt(particle_positions[i].xyz)*time_delta;
    }
} 