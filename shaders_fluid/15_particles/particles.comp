#version 450

layout(local_size_x = 1000) in;


const int PARTICLE_BUFFER_SIZE = 1000000;


layout(set = 0, binding = 0) uniform simulation_params_buffer{
    layout(offset = 32) float time_delta;
};
layout(set = 0, binding = 1) uniform sampler3D velocities;
layout(set = 0, binding = 2) buffer restrict particles{
    vec4 particle_positions[PARTICLE_BUFFER_SIZE];
};




float getVelocityXAt(vec3 pos){
    return texture(velocities, pos + vec3(0.5, 0, 0)).x;
}
float getVelocityYAt(vec3 pos){
    return texture(velocities, pos + vec3(0, 0.5, 0)).y;
}
float getVelocityZAt(vec3 pos){
    return texture(velocities, pos + vec3(0, 0, 0.5)).z;
}
vec3 getVelocityAt(vec3 pos){
    return vec3(getVelocityXAt(pos), getVelocityYAt(pos), getVelocityZAt(pos));
}





void main(){
    int i = int(gl_GlobalInvocationID.x);
    vec4 pos = particle_positions[i];
    if (pos.w == 1.0){
        vec3 v = getVelocityAt(pos.xyz);
        vec3 result_pos = pos.xyz + v*time_delta;
        particle_positions[i] = vec4(result_pos, 1.0);
    }
} 