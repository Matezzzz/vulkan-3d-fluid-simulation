#version 450
#extension GL_EXT_samplerless_texture_functions : require

layout(local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(set = 0, binding = 0, r8ui)    uniform readonly restrict uimage3D cell_types;
layout(set = 0, binding = 1)          uniform sampler3D velocities_src_sampler;
layout(set = 0, binding = 2, rgba32f) uniform writeonly restrict image3D velocities_dst;

const uint CELL_AIR = 1;
const uint CELL_WATER = 2;
const float time_delta = 0.01;



uint cellAt(ivec3 i){
    return imageLoad(cell_types, i).x;
}
bool isActive(uint type){
    return (type == CELL_AIR || type == CELL_WATER);
}
bool isWater(uint type){
    return (type == CELL_WATER);
}

void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID.xyz);
    vec3 velocity = texture(velocities_src_sampler, vec3(i) + vec3(0.5, 0.5, 0.5)).xyz;
    uint local_type = cellAt(i);

    bool cur_active = isWater(local_type);
    if (i.x != 0 && (cur_active || isWater(cellAt(i - ivec3(1, 0, 0))))){
        vec3 pos_in_tex = vec3(i) + vec3(0, 0.5, 0.5);
        vec3 cur_v = texture(velocities_src_sampler, pos_in_tex).xyz;
        velocity.x = texture(velocities_src_sampler, pos_in_tex - cur_v*time_delta).x;
    }
    if (i.y != 0 && (cur_active || isWater(cellAt(i - ivec3(0, 1, 0))))){
        vec3 pos_in_tex = vec3(i) + vec3(0.5, 0, 0.5);
        vec3 cur_v = texture(velocities_src_sampler, pos_in_tex).xyz;
        velocity.y = texture(velocities_src_sampler, pos_in_tex - cur_v*time_delta).y;
    }
    if (i.z != 0 && (cur_active || isWater(cellAt(i - ivec3(1, 0, 0))))){
        vec3 pos_in_tex = vec3(i) + vec3(0.5, 0.5, 0);
        vec3 cur_v = texture(velocities_src_sampler, pos_in_tex).xyz;
        velocity.z = texture(velocities_src_sampler, pos_in_tex - cur_v*time_delta).z;
    }
    imageStore(velocities_dst, i, vec4(velocity, 0.0));
}