#version 450

layout(local_size_x = 128, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, r8ui) uniform restrict readonly uimage3D cell_types;
layout(set = 0, binding = 1, r32f) uniform restrict readonly image3D divergences;
layout(set = 0, binding = 2, r32f) uniform restrict image3D pressures_1;
layout(set = 0, binding = 3, r32f) uniform restrict image3D pressures_2;



const uint CELL_AIR = 1;
const uint CELL_WATER = 2;
const uint CELL_SOLID = 3;

const float pressure_air = 1;
const float fluid_density = 1;
const float time_delta = 0.01;
const float cell_width = 1;

layout(push_constant) uniform constants{
    bool isEvenIteration;
};



#define search_neighbor(tex_in, move)\
t = imageLoad(cell_types, i + move).x;\
if (t != CELL_SOLID){\
    if (t == CELL_WATER){\
        s -= imageLoad(tex_in, i + move).x;\
    }else{\
        s -= pressure_air;\
    }\
    aii++;\
}

#define computePressure(tex_in, tex_out)\
int aii = 0;\
float s = imageLoad(divergences, i).x  * fluid_density * cell_width / time_delta;\
uint t;\
search_neighbor(tex_in, ivec3(1, 0, 0))\
search_neighbor(tex_in, ivec3(0, 1, 0))\
search_neighbor(tex_in, ivec3(0, 0, 1))\
search_neighbor(tex_in, ivec3(-1, 0, 0))\
search_neighbor(tex_in, ivec3(0, -1, 0))\
search_neighbor(tex_in, ivec3(0, 0, -1))\
imageStore(tex_out, i, vec4(-s / aii, 0, 0, 0));


void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID.xyz);
    uint t = imageLoad(cell_types, i).x;
    if (t == CELL_WATER){
        if (isEvenIteration){
            computePressure(pressures_1, pressures_2)
        }else{
            computePressure(pressures_2, pressures_1)
        }
    }
}