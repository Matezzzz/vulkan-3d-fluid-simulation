#version 450

/**
 * update_active.comp
 * - Change all cells bordering water from inactive to air
 */




layout(local_size_x = 5, local_size_y = 5, local_size_z = 5) in;



layout(set = 0, binding = 0) uniform simulation_params_buffer{
    layout(offset = 20) int cell_type_air;
    layout(offset = 24) int cell_type_water;
    layout(offset = 28) int cell_type_solid;
};
layout(set = 0, binding = 1, r8ui) uniform restrict uimage3D cell_types;
 




ivec3 moves[6] = ivec3[](ivec3(1, 0, 0), ivec3(0, 1, 0), ivec3(0, 0, 1), ivec3(-1, 0, 0), ivec3(0, -1, 0), ivec3(0, 0, -1));

//return cell type at given position
uint cellAt(ivec3 pos){
    return imageLoad(cell_types, pos).x;
}
//is given cell type water
bool isWater(uint a){
    return (a == cell_type_water);
}
//is there water at given position
bool waterAt(ivec3 pos){
    return isWater(cellAt(pos));
}
//store cell value at given position with given value
void storeCell(ivec3 pos, uint val){
    imageStore(cell_types, pos, uvec4(val, 0, 0, 0));
}

void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID.xyz);
    //border coordinates
    ivec3 b = imageSize(cell_types) - ivec3(1, 1, 1);
    //mark all cells neighboring border of the fluid domain as solid
    if ((i.x == 0 || i.x == b.x) || (i.y == 0 || i.y == b.y) || (i.z == 0 || i.z == b.z)){
        storeCell(i, cell_type_solid);
    }else{  //if cell isn't solid
        //if current cell isn't water
        if (!isWater(cellAt(i))){
            //go through all neighboring cells, check if there is water in any of them
            bool water_around = false;
            for (int j = 0; j < 6; j++){
                water_around = water_around || waterAt(i + moves[j]);
            }
            //if there is any water, mark current cell as air
            if (water_around){
                storeCell(i, cell_type_air);
            }  
        }
    }
}

