#version 450

layout(local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform simulation_params_buffer{
    layout(offset = 28) int cell_type_solid;
    layout(offset = 116) int detailed_resolution;
    layout(offset = 148) float dens_diffuse_a;
};
layout(set = 0, binding = 1, r32ui)uniform restrict readonly uimage3D cell_types;
layout(set = 0, binding = 2, r32f) uniform restrict image3D densities_1;
layout(set = 0, binding = 3, r32f) uniform restrict image3D densities_2;

layout (push_constant) uniform constants{
    uint is_even_iteration;
};


uint cellAt(ivec3 i){
    return imageLoad(cell_types, i).x;
}
bool isSolid(uint a){
    return (a == cell_type_solid);
}


float getDensity1(ivec3 pos){
    return imageLoad(densities_1, pos).x;
}
float getDensity2(ivec3 pos){
    return imageLoad(densities_2, pos).x;
}

#define diffuse(getDensity, densities_dst)\
float d = ( 1.0 - 6 * dens_diffuse_a) * getDensity(i) + dens_diffuse_a * \
    (getDensity(i + ivec3(1, 0, 0)) + getDensity(i - ivec3(1, 0, 0)) + \
     getDensity(i + ivec3(0, 1, 0)) + getDensity(i - ivec3(0, 1, 0)) + \
     getDensity(i + ivec3(0, 0, 1)) + getDensity(i - ivec3(0, 0, 1))); \
imageStore(densities_dst, i, vec4(d, 0.0, 0.0, 0.0));

void main(){
    ivec3 i = ivec3(gl_GlobalInvocationID.xyz);

    if (!isSolid(cellAt(i / detailed_resolution))){
        if (is_even_iteration == 1){
            diffuse(getDensity1, densities_2)
        }else{
            diffuse(getDensity2, densities_1)
        }
    }
}